name: Imprint
description: Authenticate Github Actions Runner via OIDC id token
inputs:
  subject:
    required: true
    default: narwhl
  scope:
    required: true

runs:
  using: composite
  steps:
    - uses: actions/github-script@v7
      with:
        script: |
          const stsTokenEndpoint = 'sts.narwhl.workers.dev';
          const token = await core.getIDToken(stsTokenEndpoint);
          const { jti } = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());
          const payload = {
            audience: `//${stsTokenEndpoint}/providers/github/passports/${{ inputs.subject }}`,
            grantType: "urn:ietf:params:oauth:grant-type:token-exchange",
            requestedTokenType: "urn:ietf:params:oauth:token-type:access_token",
            scope: "${{ inputs.scope }}",
            subjectTokenType: "urn:ietf:params:oauth:token-type:jwt",
            subjectToken: token
          };
          let response = await fetch(`https://${stsTokenEndpoint}/v1/token`, {
            method: "POST",
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
          });
          if(response.status !== 200) {
            core.setFailed('Aborting due to inability to obtain access token')
          } else {
            const { access_token } = await response.json();
            response = await fetch(`https://${stsTokenEndpoint}/v1/notarize/${jti}/resources`, {
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${access_token}`
              }
            })
            if(response.status !== 200) {
              core.setFailed('Aborting due to failure of notarizing for requested workload')
            } else {
              const resources = await response.json();
              for (const resource of Object.keys(resources)) {
                Object.entries(resources[resource]).forEach(([key, value]) => {
                  core.setSecret(value);
                  core.exportVariable({
                    'tailscale.auth_key':'TAILSCALE_AUTHKEY',
                    'cloudflare.access_key_id': 'AWS_ACCESS_KEY_ID',
                    'cloudflare.secret_access_key': 'AWS_SECRET_ACCESS_KEY',
                    'cloudflare.s3_endpoint_url': 'AWS_ENDPOINT_URL_S3',
                    'cloudflare:access.client_id': 'CF_ACCESS_CLIENT_ID',
                    'cloudflare:access.client_secret': 'CF_ACCESS_CLIENT_SECRET',
                    'vsphere.server': 'VSPHERE_SERVER',
                    'vsphere.username': 'VSPHERE_USER',
                    'vsphere.password': 'VSPHERE_PASSWORD',
                    'github.access_token': 'GITHUB_TOKEN',
                    'proxmox.endpoint_url': 'PROXMOX_VE_ENDPOINT',
                    'proxmox.username': 'PROXMOX_VE_USERNAME',
                    'proxmox.password': 'PROXMOX_VE_PASSWORD',
                    'onepassword.service_account_token': 'OP_SERVICE_ACCOUNT_TOKEN',
                  }[`${resource}.${key}`], value);
                })
              }
            }
          }
          return;
